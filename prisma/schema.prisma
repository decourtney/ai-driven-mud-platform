// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator py {
  provider = "prisma-client-py"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  gameSessions  GameSession[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/// Game-specific table to persist a playerâ€™s current playthrough
model GameSession {
  id         String        @id @default(cuid())
  user_id    String
  slug       String
  game_state Json // game state
  is_active  Boolean       @default(false)
  created_at DateTime      @default(now())
  updated_at DateTime      @updatedAt
  messages   ChatMessage[]

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

enum SpeakerType {
  player
  narrator
  system
  error
}

enum ActionType {
  attack
  spell
  social
  interact
  movement
  user_prompt // User input
  narrate // For any narrations not prompted by actions
}

model ChatMessage {
  id         String      @id @default(cuid())
  session_id String
  speaker    SpeakerType
  action     ActionType
  content    String
  timestamp  DateTime    @default(now())

  gameSession GameSession @relation(fields: [session_id], references: [id], onDelete: Cascade)
}
