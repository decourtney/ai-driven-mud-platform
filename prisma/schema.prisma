generator client {
  provider = "prisma-client-js"
}

generator py {
  provider = "prisma-client-py"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  game_session  GameSession[]
  player_state  PlayerState[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/// Game-specific tables
model GameSession {
  id           String        @id @default(cuid())
  user_id      String
  is_active    Boolean       @default(false)
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt
  game_id      String
  messages     ChatMessage[]
  user         User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  game_state   GameState?
  player_state PlayerState[]
  scene_state  SceneDiff[]
}

model GameState {
  id                     String      @id @default(cuid())
  game_session_id        String      @unique
  weather                String?
  in_combat              Boolean     @default(false)
  objectives             Json?
  story_beats            Json?
  time_of_day            String?
  save_version           String?
  turn_counter           Int?
  current_turn_phase     String?
  current_actor          String?
  is_player_input_locked Boolean     @default(true)
  recent_events          Json?
  session_started        DateTime?
  initiative_order       Json?
  items_discovered       Json?
  location_history       Json?
  important_npcs_met     Json?
  completed_objectives   Json?
  created_at             DateTime    @default(now())
  updated_at             DateTime    @updatedAt
  game_id                String
  game_session           GameSession @relation(fields: [game_session_id], references: [id], onDelete: Cascade)
}

model PlayerState {
  id              String        @id @default(cuid())
  user_id         String        @unique
  game_session_id String
  name            String
  bio             String?
  gold            Int           @default(0)
  level           Int           @default(1)
  max_hp          Int
  current_hp      Int
  max_mp          Int
  current_mp      Int
  strength        Int
  dexterity       Int
  constitution    Int
  intelligence    Int
  wisdom          Int
  charisma        Int
  armor_class     Int
  can_act         Boolean       @default(true)
  is_alive        Boolean       @default(true)
  temporary_hp    Int           @default(0)
  character_type  String
  equipped_armor  Json?
  equipped_weapon Json?
  inventory       Json?
  status_effects  Json?
  current_zone    String?
  current_scene   String?
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt
  ChatMessage     ChatMessage[]
  game_session    GameSession   @relation(fields: [game_session_id], references: [id], onDelete: Cascade)
  user            User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model NpcState {
  id             String    @id @default(cuid())
  scene_state_id String
  npc_id         String
  name           String?
  type           String
  is_alive       Boolean   @default(true)
  current_hp     Int?
  max_hp         Int?
  ai_state       Json?
  inventory      Json?
  dialogue_state Json?
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
  scene_state    SceneDiff @relation(fields: [scene_state_id], references: [id], onDelete: Cascade)
}

model SceneDiff {
  id              String      @id @default(cuid())
  game_session_id String
  zone            String
  scene           String
  diff            Json?
  created_at      DateTime    @default(now())
  updated_at      DateTime    @updatedAt
  npcs            NpcState[]
  game_session    GameSession @relation(fields: [game_session_id], references: [id], onDelete: Cascade)
}

model ChatMessage {
  id           String       @id @default(cuid())
  session_id   String
  speaker      SpeakerType
  action       ActionType
  content      String
  created_at   DateTime     @default(now())
  player_id    String?
  updated_at   DateTime     @updatedAt
  player       PlayerState? @relation(fields: [player_id], references: [id])
  game_session GameSession  @relation(fields: [session_id], references: [id], onDelete: Cascade)
}

enum SpeakerType {
  player
  narrator
  system
  error
}

enum ActionType {
  attack
  spell
  social
  interact
  movement
  user_prompt
  narrate
}
