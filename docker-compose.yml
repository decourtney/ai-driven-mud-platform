version: '3.8'

services:
  # Database
  postgres:
    image: postgres:15-alpine
    container_name: app_postgres
    environment:
      POSTGRES_DB: ${DB_NAME:-myapp}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
      target: ${BUILD_TARGET:-production}
    container_name: app_backend
    environment:
      - DATABASE_URL=postgresql://${DB_USER:-postgres}:${DB_PASSWORD:-password}@postgres:5432/${DB_NAME:-myapp}
      - ENVIRONMENT=${ENVIRONMENT:-production}
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      # Mount source code for development
      - ${PWD}:/app:ro
    restart: unless-stopped

  # Frontend
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      target: ${BUILD_TARGET:-production}
    container_name: app_frontend
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - NEXT_PUBLIC_API_URL=http://backend:8000
      - DATABASE_URL=postgresql://${DB_USER:-postgres}:${DB_PASSWORD:-password}@postgres:5432/${DB_NAME:-myapp}
    ports:
      - "3000:3000"
    depends_on:
      - backend
    volumes:
      # Mount source code for development
      - ${PWD}/app:/app:ro
    restart: unless-stopped

volumes:
  postgres_data:

# Development override
# Create docker-compose.dev.yml:
---
version: '3.8'
services:
  backend:
    build:
      target: development
    volumes:
      - .:/app
    environment:
      - ENVIRONMENT=development

  frontend:
    build:
      target: dev
    volumes:
      - ./app:/app
    environment:
      - NODE_ENV=development